{"version":3,"sources":["Services.jsx","Notification.jsx","Note.jsx","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","addObj","post","id","put","Notification","message","className","Note","note","toggleImportant","label","important","content","onClick","App","useState","setNote","newNote","setNewnote","showAll","setShowall","errorMessage","seterrorMessage","greenMessage","setgreenMessage","useEffect","noteService","initialNote","console","log","toggleImportanceOf","notes","find","n","changedNote","map","catch","error","alert","filter","setTimeout","Success","successMsg","noteToshow","i","onSubmit","event","preventDefault","length","Math","random","date","Date","toString","concat","placeholder","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.05498ade.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst postAll = addObj => {\r\n  const request = axios.post(baseUrl, addObj)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst putAll = (id, addObj) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, addObj)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { \r\n  getAll, \r\n  postAll, \r\n  putAll \r\n}","const Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n  export default Notification;","import React from \"react\"\r\nconst Note =({note,toggleImportant})=>{\r\n    const label= note.important ? \"make not important\":\"make important\"\r\n   \r\n    return(\r\n        <>\r\n        <li className='note'>\r\n            {note.content}\r\n            <button onClick={toggleImportant}>{label}</button>\r\n           \r\n        </li>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default Note","import React,{useState,useEffect} from \"react\"\n\nimport \"./index.css\"\nimport noteService from \"./Services\"\nimport Notification  from \"./Notification\"\nimport Note from \"./Note\"\nconst App=()=>{\n  const [note,setNote]=useState([])\n  const [newNote,setNewnote]=useState(\"\")\n  const [showAll,setShowall]=useState(\"\")\n  const [errorMessage,seterrorMessage]=useState(\"some error happened....\")\n  const [greenMessage,setgreenMessage]=useState(null)\n\n\n  useEffect(()=>{\n   noteService\n   .getAll()\n    .then((initialNote)=>{\n      setNote(initialNote)\n      console.log(\"promise fullfilled\")\n      console.log(initialNote)\n  \n    })\n  },[])\n  \n\n  const subEventhandler =(event)=>{\n    event.preventDefault()\n    const addObj={\n      id:note.length+1,\n      content:newNote,\n      important: Math.random() > 0.5,\n      date: new Date().toString()\n    }\n    noteService.postAll(addObj)\n    .then((response)=>{\n    setNote(note.concat(addObj))\n    setgreenMessage(\n      `new note '${newNote}' is added`\n    )\n    setTimeout(() => {\n      setgreenMessage(\n        null\n      );\n    }, 5000);\n  }).catch(error=>{\n    seterrorMessage(`new note is added`)\n    setTimeout(() => {\n      seterrorMessage(null)\n    }, 5000);\n  })\n    setNote(note.concat(addObj))\n    setNewnote(\"\")\n  }\n  const toggleImportanceOf = id => {\n    console.log('importance of ' + id + ' needs to be toggled')\n    \n    const notes = note.find(n => n.id === id)\n    const changedNote = { ...notes, important: !notes.important }\n   \n  \n    noteService.putAll(id, changedNote).then(response => {\n      setNote(note.map(note => note.id !== id ? note : response))\n    }).catch(error => {\n      alert(\n        `the note '${note.content}' was already deleted from server`\n      )\n      setNote(notes.filter(n => n.id !== id))\n    })\n     \n    setgreenMessage(\n      `importance is changed successfully`\n    )\n    setTimeout(() => {\n      setgreenMessage(\n        null\n      );\n    }, 1500);\n  }\n  const Success=({successMsg})=>{\n    if (successMsg=== null){\n      return null\n    }\n    return <div className=\"succMsg\">{successMsg}</div>\n  }\n\n  const noteToshow= showAll? note: note.filter((i)=> i.important===true)\n\n  return( <>\n    <h1>Notes</h1>\n    <Notification message={errorMessage} />\n    <Success successMsg={greenMessage}/>\n    <div>\n\n      <button onClick={()=>setShowall(!showAll)}>show {showAll ? \"important\":\"All\"}</button>\n    </div>\n    <ul>\n    {noteToshow.map((note)=>\n        <Note key={note.id} note= {note} toggleImportant={()=>toggleImportanceOf(note.id)}/>\n      )}\n    </ul>\n\n    <form onSubmit={subEventhandler}>\n      <input placeholder=\"new note..\" value={newNote} onChange={((event)=>setNewnote(event.target.value))}/>\n      <button type=\"submit\" >add</button>\n    </form>\n    </>)\n \n  }\n export default App\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}